"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_app_view_scene_SplatScene_js"],{

/***/ "(app-pages-browser)/./src/app/view/customOrbitControls.tsx":
/*!**********************************************!*\
  !*** ./src/app/view/customOrbitControls.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gsplat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gsplat */ \"(app-pages-browser)/./node_modules/gsplat/dist/index.js\");\n\nclass customOrbitControls {\n    constructor(inputCamera, domElement, alpha = 0.5, beta = 0.1, radius = 10, enableKeyboardControls = true, inputTarget = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(), autoRotate = true){\n        this.minAngle = -90;\n        this.maxAngle = 90;\n        this.minZoom = 0.1;\n        this.maxZoom = 30;\n        this.orbitSpeed = 1;\n        this.panSpeed = 1;\n        this.zoomSpeed = 1;\n        this.dampening = 0.12;\n        this.setCameraTarget = ()=>{};\n        this.attach = ()=>{};\n        this.detach = ()=>{};\n        let target = inputTarget.clone();\n        let desiredTarget = target.clone();\n        let desiredAlpha = alpha;\n        let desiredBeta = beta;\n        let desiredRadius = radius;\n        let dragging = false;\n        let panning = false;\n        let lastDist = 0;\n        let lastX = 0;\n        let lastY = 0;\n        const keys = {};\n        let camera = null;\n        let isUpdatingCamera = false;\n        const onCameraChange = ()=>{\n            if (!camera || isUpdatingCamera) return;\n            const eulerRotation = camera.rotation.toEuler();\n            desiredAlpha = -eulerRotation.y;\n            desiredBeta = -eulerRotation.x;\n            const x = camera.position.x - desiredRadius * Math.sin(desiredAlpha) * Math.cos(desiredBeta);\n            const y = camera.position.y + desiredRadius * Math.sin(desiredBeta);\n            const z = camera.position.z + desiredRadius * Math.cos(desiredAlpha) * Math.cos(desiredBeta);\n            desiredTarget = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, z);\n        };\n        this.attach = (newCamera)=>{\n            if (camera) {\n                this.detach();\n            }\n            camera = newCamera;\n            camera.addEventListener(\"change\", onCameraChange);\n        };\n        this.detach = ()=>{\n            if (!camera) return;\n            camera.removeEventListener(\"change\", onCameraChange);\n            camera = null;\n        };\n        this.attach(inputCamera);\n        this.setCameraTarget = (newTarget)=>{\n            if (!camera) return;\n            const dx = newTarget.x - camera.position.x;\n            const dy = newTarget.y - camera.position.y;\n            const dz = newTarget.z - camera.position.z;\n            desiredRadius = Math.sqrt(dx * dx + dy * dy + dz * dz);\n            desiredBeta = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz));\n            desiredAlpha = -Math.atan2(dx, dz);\n            desiredTarget = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(newTarget.x, newTarget.y, newTarget.z);\n        };\n        const computeZoomNorm = ()=>{\n            return 0.1 + 0.9 * (desiredRadius - this.minZoom) / (this.maxZoom - this.minZoom);\n        };\n        const onKeyDown = (e)=>{\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n        const onKeyUp = (e)=>{\n            keys[e.code] = false; // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n        };\n        const onMouseDown = (e)=>{\n            preventDefault(e);\n            dragging = true;\n            panning = e.button === 2;\n            lastX = e.clientX;\n            lastY = e.clientY;\n            window.addEventListener(\"mouseup\", onMouseUp);\n        };\n        const onMouseUp = (e)=>{\n            preventDefault(e);\n            dragging = false;\n            panning = false;\n            window.removeEventListener(\"mouseup\", onMouseUp);\n        };\n        const onMouseMove = (e)=>{\n            preventDefault(e);\n            if (!dragging || !camera) return;\n            const dx = e.clientX - lastX;\n            const dy = e.clientY - lastY;\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n                const panX = -dx * this.panSpeed * 0.01 * zoomNorm;\n                const panY = -dy * this.panSpeed * 0.01 * zoomNorm;\n                const R = gsplat__WEBPACK_IMPORTED_MODULE_0__.Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(R[0], R[3], R[6]);\n                const up = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(panX));\n                desiredTarget = desiredTarget.add(up.multiply(panY));\n            } else {\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(Math.max(desiredBeta, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180);\n            }\n            lastX = e.clientX;\n            lastY = e.clientY;\n        };\n        const onWheel = (e)=>{\n            preventDefault(e);\n            const zoomNorm = computeZoomNorm();\n            desiredRadius += e.deltaY * this.zoomSpeed * 0.025 * zoomNorm;\n            desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n        };\n        const onTouchStart = (e)=>{\n            preventDefault(e);\n            if (e.touches.length === 1) {\n                dragging = true;\n                panning = false;\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n                lastDist = 0;\n            } else if (e.touches.length === 2) {\n                dragging = true;\n                panning = true;\n                lastX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                lastY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                lastDist = Math.sqrt(distX * distX + distY * distY);\n            }\n        };\n        const onTouchEnd = (e)=>{\n            preventDefault(e);\n            dragging = false;\n            panning = false;\n        };\n        const onTouchMove = (e)=>{\n            preventDefault(e);\n            if (!dragging || !camera) return;\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                const dist = Math.sqrt(distX * distX + distY * distY);\n                const delta = lastDist - dist;\n                desiredRadius += delta * this.zoomSpeed * 0.1 * zoomNorm;\n                desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n                lastDist = dist;\n                const touchX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                const touchY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const dx = touchX - lastX;\n                const dy = touchY - lastY;\n                const R = gsplat__WEBPACK_IMPORTED_MODULE_0__.Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(R[0], R[3], R[6]);\n                const up = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(-dx * this.panSpeed * 0.025 * zoomNorm));\n                desiredTarget = desiredTarget.add(up.multiply(-dy * this.panSpeed * 0.025 * zoomNorm));\n                lastX = touchX;\n                lastY = touchY;\n            } else {\n                const dx = e.touches[0].clientX - lastX;\n                const dy = e.touches[0].clientY - lastY;\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(Math.max(desiredBeta, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180);\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n            }\n        };\n        const lerp = (a, b, t)=>{\n            return (1 - t) * a + t * b;\n        };\n        this.update = ()=>{\n            if (!camera) return;\n            isUpdatingCamera = true;\n            alpha = lerp(alpha, desiredAlpha, this.dampening);\n            beta = lerp(beta, desiredBeta, this.dampening);\n            radius = lerp(radius, desiredRadius, this.dampening);\n            target = target.lerp(desiredTarget, this.dampening);\n            const x = target.x + radius * Math.sin(alpha) * Math.cos(beta);\n            const y = target.y - radius * Math.sin(beta);\n            const z = target.z - radius * Math.cos(alpha) * Math.cos(beta);\n            camera.position = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, z);\n            const direction = target.subtract(camera.position).normalize();\n            const rx = Math.asin(-direction.y);\n            const ry = Math.atan2(direction.x, direction.z);\n            camera.rotation = gsplat__WEBPACK_IMPORTED_MODULE_0__.Quaternion.FromEuler(new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(rx, ry, 0));\n            // Just spit balling here on the values\n            const moveSpeed = 0.025;\n            const rotateSpeed = 0.01;\n            const R = gsplat__WEBPACK_IMPORTED_MODULE_0__.Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(-R[2], -R[5], -R[8]);\n            const right = new gsplat__WEBPACK_IMPORTED_MODULE_0__.Vector3(R[0], R[3], R[6]);\n            if (keys[\"KeyS\"]) desiredTarget = desiredTarget.add(forward.multiply(moveSpeed));\n            if (keys[\"KeyW\"]) desiredTarget = desiredTarget.subtract(forward.multiply(moveSpeed));\n            if (keys[\"KeyA\"]) desiredTarget = desiredTarget.subtract(right.multiply(moveSpeed));\n            if (keys[\"KeyD\"]) desiredTarget = desiredTarget.add(right.multiply(moveSpeed));\n            // Add rotation with 'e' and 'q' for horizontal rotation\n            if (keys[\"KeyE\"]) desiredAlpha += rotateSpeed;\n            if (keys[\"KeyQ\"]) desiredAlpha -= rotateSpeed;\n            // Add rotation with 'r' and 'f' for vertical rotation\n            if (keys[\"KeyR\"]) desiredBeta += rotateSpeed;\n            if (keys[\"KeyF\"]) desiredBeta -= rotateSpeed;\n            if (autoRotate) {\n                if (desiredAlpha < 2 * Math.PI && desiredRadius > 5) {\n                    desiredAlpha += rotateSpeed;\n                    desiredRadius -= 0.02 / desiredAlpha;\n                } else autoRotate = false;\n                console.log(\"A:desiredAlpha, desiredBeta, desiredRadius\", desiredAlpha, desiredBeta, desiredRadius);\n            }\n            console.log(\"B:desiredAlpha, desiredBeta, desiredRadius\", desiredAlpha, desiredBeta, desiredRadius);\n            isUpdatingCamera = false;\n        };\n        const preventDefault = (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n        };\n        this.dispose = ()=>{\n            domElement.removeEventListener(\"dragenter\", preventDefault);\n            domElement.removeEventListener(\"dragover\", preventDefault);\n            domElement.removeEventListener(\"dragleave\", preventDefault);\n            domElement.removeEventListener(\"contextmenu\", preventDefault);\n            domElement.removeEventListener(\"mousedown\", onMouseDown);\n            domElement.removeEventListener(\"mousemove\", onMouseMove);\n            domElement.removeEventListener(\"wheel\", onWheel);\n            domElement.removeEventListener(\"touchstart\", onTouchStart);\n            domElement.removeEventListener(\"touchend\", onTouchEnd);\n            domElement.removeEventListener(\"touchmove\", onTouchMove);\n            if (enableKeyboardControls) {\n                window.removeEventListener(\"keydown\", onKeyDown);\n                window.removeEventListener(\"keyup\", onKeyUp);\n            }\n        };\n        if (enableKeyboardControls) {\n            window.addEventListener(\"keydown\", onKeyDown);\n            window.addEventListener(\"keyup\", onKeyUp);\n        }\n        domElement.addEventListener(\"dragenter\", preventDefault);\n        domElement.addEventListener(\"dragover\", preventDefault);\n        domElement.addEventListener(\"dragleave\", preventDefault);\n        domElement.addEventListener(\"contextmenu\", preventDefault);\n        domElement.addEventListener(\"mousedown\", onMouseDown);\n        domElement.addEventListener(\"mousemove\", onMouseMove);\n        domElement.addEventListener(\"wheel\", onWheel);\n        domElement.addEventListener(\"touchstart\", onTouchStart);\n        domElement.addEventListener(\"touchend\", onTouchEnd);\n        domElement.addEventListener(\"touchmove\", onTouchMove);\n        this.update();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (customOrbitControls);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/view/customOrbitControls.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/view/scene/SplatScene.js":
/*!******************************************!*\
  !*** ./src/app/view/scene/SplatScene.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gsplat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsplat */ \"(app-pages-browser)/./node_modules/gsplat/dist/index.js\");\n/* harmony import */ var _customOrbitControls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../customOrbitControls */ \"(app-pages-browser)/./src/app/view/customOrbitControls.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n// import myOrbitControls from \"../myOrbitControls\";\nconst progressDialog = document.getElementById(\"progress-dialog\");\nconst progressIndicator = document.getElementById(\"progress-indicator\");\nconst SplatScene = (param)=>{\n    let { url } = param;\n    _s();\n    const sceneRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const scene = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const camera = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const renderer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const controls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const isLoading = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (sceneRef.current && !isLoading.current) {\n            isLoading.current = true;\n            sceneRef.current.innerHTML = \"\";\n            scene.current = new gsplat__WEBPACK_IMPORTED_MODULE_2__.Scene();\n            camera.current = new gsplat__WEBPACK_IMPORTED_MODULE_2__.Camera();\n            renderer.current = new gsplat__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer();\n            controls.current = new _customOrbitControls__WEBPACK_IMPORTED_MODULE_3__[\"default\"](camera.current, renderer.current.domElement);\n            const handleResize = ()=>{\n                renderer.current.setSize(window.innerWidth, window.innerHeight);\n            };\n            const frame = ()=>{\n                controls.current.update();\n                renderer.current.render(scene.current, camera.current);\n                requestAnimationFrame(frame);\n            };\n            const onKeyDown = (e)=>{\n                if (e.key === \"PageUp\") {\n                    scene.current.scale(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(1.1, 1.1, 1.1));\n                } else if (e.key === \"PageDown\") {\n                    scene.current.scale(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0.9, 0.9, 0.9));\n                } else if (e.key === \"ArrowLeft\") {\n                    scene.current.rotate(gsplat__WEBPACK_IMPORTED_MODULE_2__.Quaternion.FromEuler(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0.1, 0)));\n                } else if (e.key === \"ArrowRight\") {\n                    scene.current.rotate(gsplat__WEBPACK_IMPORTED_MODULE_2__.Quaternion.FromEuler(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, -0.1, 0)));\n                } else if (e.key === \"z\") {\n                    scene.current.translate(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0.1));\n                }\n            };\n            handleResize();\n            window.addEventListener(\"resize\", handleResize);\n            window.addEventListener(\"keydown\", onKeyDown);\n            requestAnimationFrame(frame);\n            sceneRef.current.appendChild(renderer.current.domElement);\n            const animateSceneRotate = function(scene) {\n                let speed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Math.PI / 2.5;\n                const limitSize = 15.0;\n                scene.current.limitBox(-5, limitSize, -limitSize, 5, -0, limitSize);\n                return new Promise((resolve)=>{\n                    let angle = 0;\n                    scene.current.scale(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0.1, 0.1, 0.1));\n                    scene.current.rotate(gsplat__WEBPACK_IMPORTED_MODULE_2__.Quaternion.FromEuler(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(0.3, 0, 0.3)));\n                    const animate = async ()=>{\n                        if (angle >= Math.PI * 2) {\n                            // 一周したらアニメーションを終了\n                            resolve();\n                        } else {\n                            // シーンをy軸周りに回転\n                            scene.current.rotate(gsplat__WEBPACK_IMPORTED_MODULE_2__.Quaternion.FromEuler(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(-0.1, -speed, -0.1)));\n                            scene.current.scale(new gsplat__WEBPACK_IMPORTED_MODULE_2__.Vector3(1.2, 1.2, 1.2));\n                            angle += speed;\n                            renderer.current.render(scene.current, camera.current);\n                            // 描画が終わるまで待機\n                            await new Promise((animate)=>setTimeout(animate, 3000));\n                            // 次のフレームをリクエスト\n                            requestAnimationFrame(animate);\n                        }\n                    };\n                    animate();\n                });\n            };\n            const animateRotation = function(camera, renderer, scene) {\n                let radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.5, speed = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.01;\n                return new Promise((resolve)=>{\n                    let angle = Math.PI; //0;\n                    const animate = ()=>{\n                        if (angle >= Math.PI * 3 + 0.5) {\n                            // 一周したらアニメーションを終了\n                            resolve();\n                        } else {\n                            // カメラの位置を更新\n                            camera.current.position.x = -radius * Math.sin(angle);\n                            camera.current.position.z = radius * Math.cos(angle) - 0.5;\n                            angle += speed;\n                            console.log(\"angle\", angle);\n                            renderer.current.render(scene.current, camera.current);\n                            // 次のフレームをリクエスト\n                            requestAnimationFrame(animate);\n                        }\n                    };\n                    animate();\n                });\n            };\n            const animateZoom = function(camera, renderer, scene) {\n                let startX = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 4.5, startZ = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, endX = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0, endZ = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : -4.5, speed = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 0.1;\n                return new Promise((resolve)=>{\n                    let x = startX;\n                    // let y = startY;\n                    let z = startZ;\n                    const animate = ()=>{\n                        if (x <= endX && z <= endZ) {\n                            resolve();\n                        } else if (x > endX) {\n                            camera.current.position.x = x;\n                            x -= speed;\n                        // camera.current.position.z = z;\n                        // z -= speed;\n                        } else if (z > endZ) {\n                            camera.current.position.z = z;\n                            z -= speed;\n                        }\n                        renderer.current.render(scene.current, camera.current);\n                        requestAnimationFrame(animate);\n                    };\n                    animate();\n                });\n            };\n            // ファイルの読み込みが完了した後の処理\n            (async ()=>{\n                await gsplat__WEBPACK_IMPORTED_MODULE_2__.Loader.LoadAsync(url, scene.current, (progress)=>{\n                    progressIndicator.value = progress * 100;\n                }).then(async ()=>{\n                    // await animateSceneRotate(scene);\n                    // await animateRotation(camera, renderer, scene, 3, 0.1);\n                    // await animateZoom(camera, renderer, scene);\n                    progressDialog.close();\n                    isLoading.current = false;\n                    if (!isMounted.current) {\n                    // Clean up any resources here if needed\n                    }\n                });\n            })();\n        }\n    }, [\n        url\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: sceneRef\n    }, void 0, false, {\n        fileName: \"/frontend/src/app/view/scene/SplatScene.js\",\n        lineNumber: 157,\n        columnNumber: 9\n    }, undefined);\n};\n_s(SplatScene, \"MiRRICZNmSnn9fKeBrNda8ABBtg=\");\n_c = SplatScene;\n/* harmony default export */ __webpack_exports__[\"default\"] = (SplatScene);\nvar _c;\n$RefreshReg$(_c, \"SplatScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/view/scene/SplatScene.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsplat/dist/index.js":
/*!*******************************************!*\
  !*** ./node_modules/gsplat/dist/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Camera: function() { return /* binding */ Z; },\n/* harmony export */   FadeInPass: function() { return /* binding */ a; },\n/* harmony export */   Loader: function() { return /* binding */ n; },\n/* harmony export */   Matrix3: function() { return /* binding */ Q; },\n/* harmony export */   Matrix4: function() { return /* binding */ V; },\n/* harmony export */   OrbitControls: function() { return /* binding */ m; },\n/* harmony export */   PLYLoader: function() { return /* binding */ R; },\n/* harmony export */   Quaternion: function() { return /* binding */ F; },\n/* harmony export */   Scene: function() { return /* binding */ d; },\n/* harmony export */   ShaderPass: function() { return /* binding */ b; },\n/* harmony export */   Vector3: function() { return /* binding */ U; },\n/* harmony export */   WebGLRenderer: function() { return /* binding */ s; }\n/* harmony export */ });\nclass U{constructor(U=0,F=0,l=0){this.x=U,this.y=F,this.z=l}equals(U){return this.x===U.x&&(this.y===U.y&&this.z===U.z)}add(F){return\"number\"==typeof F?new U(this.x+F,this.y+F,this.z+F):new U(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return\"number\"==typeof F?new U(this.x-F,this.y-F,this.z-F):new U(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return\"number\"==typeof F?new U(this.x*F,this.y*F,this.z*F):new U(this.x*F.x,this.y*F.y,this.z*F.z)}lerp(F,l){return new U(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2)}normalize(){const F=this.length();return new U(this.x/F,this.y/F,this.z/F)}flat(){return[this.x,this.y,this.z]}clone(){return new U(this.x,this.y,this.z)}}class F{constructor(U=0,F=0,l=0,t=1){this.x=U,this.y=F,this.z=l,this.w=t}equals(U){return this.x===U.x&&(this.y===U.y&&(this.z===U.z&&this.w===U.w))}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new F(this.x/U,this.y/U,this.z/U,this.w/U)}multiply(U){const l=this.w,t=this.x,Q=this.y,V=this.z,Z=U.w,d=U.x,n=U.y,R=U.z;return new F(l*d+t*Z+Q*R-V*n,l*n-t*R+Q*Z+V*d,l*R+t*n-Q*d+V*Z,l*Z-t*d-Q*n-V*R)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new F(this.x,this.y,this.z,this.w)}static FromEuler(U){const l=U.x/2,t=U.y/2,Q=U.z/2,V=Math.cos(t),Z=Math.sin(t),d=Math.cos(l),n=Math.sin(l),R=Math.cos(Q),e=Math.sin(Q);return new F(V*n*R+Z*d*e,Z*d*R-V*n*e,V*d*e-Z*n*R,V*d*R+Z*n*e)}toEuler(){const F=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(F,l);let Q;const V=2*(this.w*this.y-this.z*this.x);Q=Math.abs(V)>=1?Math.sign(V)*Math.PI/2:Math.asin(V);const Z=2*(this.w*this.z+this.x*this.y),d=1-2*(this.y*this.y+this.z*this.z),n=Math.atan2(Z,d);return new U(t,Q,n)}static FromMatrix3(U){const l=U.buffer,t=l[0]+l[4]+l[8];let Q,V,Z,d;if(t>0){const U=.5/Math.sqrt(t+1);d=.25/U,Q=(l[7]-l[5])*U,V=(l[2]-l[6])*U,Z=(l[3]-l[1])*U}else if(l[0]>l[4]&&l[0]>l[8]){const U=2*Math.sqrt(1+l[0]-l[4]-l[8]);d=(l[7]-l[5])/U,Q=.25*U,V=(l[1]+l[3])/U,Z=(l[2]+l[6])/U}else if(l[4]>l[8]){const U=2*Math.sqrt(1+l[4]-l[0]-l[8]);d=(l[2]-l[6])/U,Q=(l[1]+l[3])/U,V=.25*U,Z=(l[5]+l[7])/U}else{const U=2*Math.sqrt(1+l[8]-l[0]-l[4]);d=(l[3]-l[1])/U,Q=(l[2]+l[6])/U,V=(l[5]+l[7])/U,Z=.25*U}return new F(Q,V,Z,d)}}class l{constructor(){const U=new Map;this.addEventListener=(F,l)=>{U.has(F)||U.set(F,new Set),U.get(F).add(l)},this.removeEventListener=(F,l)=>{U.has(F)&&U.get(F).delete(l)},this.hasEventListener=(F,l)=>!!U.has(F)&&U.get(F).has(l),this.dispatchEvent=F=>{if(U.has(F.type))for(const l of U.get(F.type))l(F)}}}class t extends l{constructor(){super(),this._position=new U,this._rotation=new F,this._changeEvent={type:\"change\"}}get position(){return this._position}set position(U){this._position.equals(U)||(this._position=U,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(U){this._rotation.equals(U)||(this._rotation=U,this.dispatchEvent(this._changeEvent))}}class Q{constructor(U=1,F=0,l=0,t=0,Q=1,V=0,Z=0,d=0,n=1){this.buffer=[U,F,l,t,Q,V,Z,d,n]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,l=U.buffer;return new Q(l[0]*F[0]+l[3]*F[1]+l[6]*F[2],l[1]*F[0]+l[4]*F[1]+l[7]*F[2],l[2]*F[0]+l[5]*F[1]+l[8]*F[2],l[0]*F[3]+l[3]*F[4]+l[6]*F[5],l[1]*F[3]+l[4]*F[4]+l[7]*F[5],l[2]*F[3]+l[5]*F[4]+l[8]*F[5],l[0]*F[6]+l[3]*F[7]+l[6]*F[8],l[1]*F[6]+l[4]*F[7]+l[7]*F[8],l[2]*F[6]+l[5]*F[7]+l[8]*F[8])}clone(){const U=this.buffer;return new Q(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static Eye(U=1){return new Q(U,0,0,0,U,0,0,0,U)}static Diagonal(U){return new Q(U.x,0,0,0,U.y,0,0,0,U.z)}static RotationFromQuaternion(U){return new Q(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const F=Math.cos(U.x),l=Math.sin(U.x),t=Math.cos(U.y),V=Math.sin(U.y),Z=Math.cos(U.z),d=Math.sin(U.z);return new Q(...[t*Z+V*l*d,-t*d+V*l*Z,V*F,F*d,F*Z,-l,-V*Z+t*l*d,V*d+t*l*Z,t*F])}}class V{constructor(U=1,F=0,l=0,t=0,Q=0,V=1,Z=0,d=0,n=0,R=0,e=1,W=0,c=0,B=0,h=0,i=1){this.buffer=[U,F,l,t,Q,V,Z,d,n,R,e,W,c,B,h,i]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,l=U.buffer;return new V(l[0]*F[0]+l[1]*F[4]+l[2]*F[8]+l[3]*F[12],l[0]*F[1]+l[1]*F[5]+l[2]*F[9]+l[3]*F[13],l[0]*F[2]+l[1]*F[6]+l[2]*F[10]+l[3]*F[14],l[0]*F[3]+l[1]*F[7]+l[2]*F[11]+l[3]*F[15],l[4]*F[0]+l[5]*F[4]+l[6]*F[8]+l[7]*F[12],l[4]*F[1]+l[5]*F[5]+l[6]*F[9]+l[7]*F[13],l[4]*F[2]+l[5]*F[6]+l[6]*F[10]+l[7]*F[14],l[4]*F[3]+l[5]*F[7]+l[6]*F[11]+l[7]*F[15],l[8]*F[0]+l[9]*F[4]+l[10]*F[8]+l[11]*F[12],l[8]*F[1]+l[9]*F[5]+l[10]*F[9]+l[11]*F[13],l[8]*F[2]+l[9]*F[6]+l[10]*F[10]+l[11]*F[14],l[8]*F[3]+l[9]*F[7]+l[10]*F[11]+l[11]*F[15],l[12]*F[0]+l[13]*F[4]+l[14]*F[8]+l[15]*F[12],l[12]*F[1]+l[13]*F[5]+l[14]*F[9]+l[15]*F[13],l[12]*F[2]+l[13]*F[6]+l[14]*F[10]+l[15]*F[14],l[12]*F[3]+l[13]*F[7]+l[14]*F[11]+l[15]*F[15])}clone(){const U=this.buffer;return new V(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}}class Z extends t{constructor(l=new U(0,0,-5),t=new F,Z=1132,d=1132,n=.1,R=100){super();const e=()=>{const U=Q.RotationFromQuaternion(this.rotation).buffer,F=this.position.flat(),l=[[U[0],U[1],U[2],0],[U[3],U[4],U[5],0],[U[6],U[7],U[8],0],[-F[0]*U[0]-F[1]*U[3]-F[2]*U[6],-F[0]*U[1]-F[1]*U[4]-F[2]*U[7],-F[0]*U[2]-F[1]*U[5]-F[2]*U[8],1]].flat();return new V(...l)};this.position=l,this.rotation=t,this.fx=Z,this.fy=d,this.near=n,this.far=R,this.projectionMatrix=new V,this.viewMatrix=new V,this.viewProj=new V,this.update=(U,F)=>{this.projectionMatrix=new V(2*this.fx/U,0,0,0,0,-2*this.fy/F,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=e(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class d extends l{constructor(){super();const U={type:\"change\"};this._vertexCount=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this._colors=new Uint8Array(0),this.setData=F=>{this._vertexCount=F.length/d.RowLength,this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount),this._colors=new Uint8Array(4*this._vertexCount);const l=new Float32Array(F.buffer),t=new Uint8Array(F.buffer);for(let U=0;U<this._vertexCount;U++)this._positions[3*U+0]=l[8*U+0],this._positions[3*U+1]=l[8*U+1],this._positions[3*U+2]=l[8*U+2],this._rotations[4*U+0]=(t[32*U+28+0]-128)/128,this._rotations[4*U+1]=(t[32*U+28+1]-128)/128,this._rotations[4*U+2]=(t[32*U+28+2]-128)/128,this._rotations[4*U+3]=(t[32*U+28+3]-128)/128,this._scales[3*U+0]=l[8*U+3+0],this._scales[3*U+1]=l[8*U+3+1],this._scales[3*U+2]=l[8*U+3+2],this._colors[4*U+0]=t[32*U+24+0],this._colors[4*U+1]=t[32*U+24+1],this._colors[4*U+2]=t[32*U+24+2],this._colors[4*U+3]=t[32*U+24+3];this.dispatchEvent(U)},this.translate=F=>{for(let U=0;U<this._vertexCount;U++)this._positions[3*U+0]+=F.x,this._positions[3*U+1]+=F.y,this._positions[3*U+2]+=F.z;this.dispatchEvent(U)},this.rotate=l=>{const t=Q.RotationFromQuaternion(l).buffer;for(let U=0;U<this._vertexCount;U++){const Q=this._positions[3*U+0],V=this._positions[3*U+1],Z=this._positions[3*U+2];this._positions[3*U+0]=t[0]*Q+t[1]*V+t[2]*Z,this._positions[3*U+1]=t[3]*Q+t[4]*V+t[5]*Z,this._positions[3*U+2]=t[6]*Q+t[7]*V+t[8]*Z;const d=new F(this._rotations[4*U+1],this._rotations[4*U+2],this._rotations[4*U+3],this._rotations[4*U+0]),n=l.multiply(d);this._rotations[4*U+1]=n.x,this._rotations[4*U+2]=n.y,this._rotations[4*U+3]=n.z,this._rotations[4*U+0]=n.w}this.dispatchEvent(U)},this.scale=F=>{for(let U=0;U<this.vertexCount;U++)this._positions[3*U+0]*=F.x,this._positions[3*U+1]*=F.y,this._positions[3*U+2]*=F.z,this._scales[3*U+0]*=F.x,this._scales[3*U+1]*=F.y,this._scales[3*U+2]*=F.z;this.dispatchEvent(U)},this.limitBox=(F,l,t,Q,V,Z)=>{if(F>=l)throw new Error(`xMin (${F}) must be smaller than xMax (${l})`);if(t>=Q)throw new Error(`yMin (${t}) must be smaller than yMax (${Q})`);if(V>=Z)throw new Error(`zMin (${V}) must be smaller than zMax (${Z})`);const d=new Uint8Array(this._vertexCount);for(let U=0;U<this._vertexCount;U++){const n=this._positions[3*U+0],R=this._positions[3*U+1],e=this._positions[3*U+2];n>=F&&n<=l&&R>=t&&R<=Q&&e>=V&&e<=Z&&(d[U]=1)}let n=0;for(let U=0;U<this._vertexCount;U++)0!==d[U]&&(this._positions[3*n+0]=this._positions[3*U+0],this._positions[3*n+1]=this._positions[3*U+1],this._positions[3*n+2]=this._positions[3*U+2],this._rotations[4*n+0]=this._rotations[4*U+0],this._rotations[4*n+1]=this._rotations[4*U+1],this._rotations[4*n+2]=this._rotations[4*U+2],this._rotations[4*n+3]=this._rotations[4*U+3],this._scales[3*n+0]=this._scales[3*U+0],this._scales[3*n+1]=this._scales[3*U+1],this._scales[3*n+2]=this._scales[3*U+2],this._colors[4*n+0]=this._colors[4*U+0],this._colors[4*n+1]=this._colors[4*U+1],this._colors[4*n+2]=this._colors[4*U+2],this._colors[4*n+3]=this._colors[4*U+3],n+=1);this._vertexCount=n,this._positions=new Float32Array(this._positions.buffer,0,3*n),this._rotations=new Float32Array(this._rotations.buffer,0,4*n),this._scales=new Float32Array(this._scales.buffer,0,3*n),this._colors=new Uint8Array(this._colors.buffer,0,4*n),this.dispatchEvent(U)},this.saveToFile=U=>{if(!document)return;const F=new Uint8Array(this._vertexCount*d.RowLength),l=new Float32Array(F.buffer),t=new Uint8Array(F.buffer);for(let U=0;U<this._vertexCount;U++)l[8*U+0]=this._positions[3*U+0],l[8*U+1]=this._positions[3*U+1],l[8*U+2]=this._positions[3*U+2],t[32*U+24+0]=this._colors[4*U+0],t[32*U+24+1]=this._colors[4*U+1],t[32*U+24+2]=this._colors[4*U+2],t[32*U+24+3]=this._colors[4*U+3],l[8*U+3+0]=this._scales[3*U+0],l[8*U+3+1]=this._scales[3*U+1],l[8*U+3+2]=this._scales[3*U+2],t[32*U+28+0]=128*this._rotations[4*U+0]+128&255,t[32*U+28+1]=128*this._rotations[4*U+1]+128&255,t[32*U+28+2]=128*this._rotations[4*U+2]+128&255,t[32*U+28+3]=128*this._rotations[4*U+3]+128&255;const Q=new Blob([F.buffer],{type:\"application/octet-stream\"}),V=document.createElement(\"a\");V.download=U,V.href=URL.createObjectURL(Q),V.click()}}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}}d.RowLength=32;class n{static async LoadAsync(U,F,l){const t=await fetch(U,{mode:\"cors\",credentials:\"omit\"});if(200!=t.status)throw new Error(t.status+\" Unable to load \"+t.url);const Q=t.body.getReader(),V=parseInt(t.headers.get(\"content-length\")),Z=new Uint8Array(V);let d=0;for(;;){const{done:U,value:F}=await Q.read();if(U)break;Z.set(F,d),d+=F.length,null==l||l(d/V)}F.setData(Z)}static async LoadFromFileAsync(U,F,l){const t=new FileReader;t.onload=U=>{const l=new Uint8Array(U.target.result);F.setData(l)},t.onprogress=U=>{null==l||l(U.loaded/U.total)},t.readAsArrayBuffer(U),await new Promise((U=>{t.onloadend=()=>{U()}}))}}class R{static async LoadAsync(U,F,l,t=\"\"){const Q=await fetch(U,{mode:\"cors\",credentials:\"omit\"});if(200!=Q.status)throw new Error(Q.status+\" Unable to load \"+Q.url);const V=Q.body.getReader(),Z=parseInt(Q.headers.get(\"content-length\")),d=new Uint8Array(Z);let n=0;for(;;){const{done:U,value:F}=await V.read();if(U)break;d.set(F,n),n+=F.length,null==l||l(n/Z)}if(112!==d[0]||108!==d[1]||121!==d[2]||10!==d[3])throw new Error(\"Invalid PLY file\");const R=new Uint8Array(this._ParsePLYBuffer(d.buffer,t));F.setData(R)}static async LoadFromFileAsync(U,F,l,t=\"\"){const Q=new FileReader;Q.onload=U=>{const l=new Uint8Array(this._ParsePLYBuffer(U.target.result,t));F.setData(l)},Q.onprogress=U=>{null==l||l(U.loaded/U.total)},Q.readAsArrayBuffer(U),await new Promise((U=>{Q.onloadend=()=>{U()}}))}static _ParsePLYBuffer(l,t){const Q=new Uint8Array(l),V=(new TextDecoder).decode(Q.slice(0,10240)),Z=\"end_header\\n\",n=V.indexOf(Z);if(n<0)throw new Error(\"Unable to read .ply file header\");const R=parseInt(/element vertex (\\d+)\\n/.exec(V)[1]);let e=0;const W={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},c=[];for(const U of V.slice(0,n).split(\"\\n\").filter((U=>U.startsWith(\"property \")))){const[F,l,t]=U.split(\" \");if(c.push({name:t,type:l,offset:e}),!W[l])throw new Error(`Unsupported property type: ${l}`);e+=W[l]}const B=new DataView(l,n+11),h=new ArrayBuffer(d.RowLength*R),i=F.FromEuler(new U(Math.PI/2,0,0));for(let U=0;U<R;U++){const l=new Float32Array(h,U*d.RowLength,3),Q=new Float32Array(h,U*d.RowLength+12,3),V=new Uint8ClampedArray(h,U*d.RowLength+24,4),Z=new Uint8ClampedArray(h,U*d.RowLength+28,4);let n=255,R=0,W=0,a=0;c.forEach((F=>{let t;switch(F.type){case\"float\":t=B.getFloat32(F.offset+U*e,!0);break;case\"int\":t=B.getInt32(F.offset+U*e,!0);break;default:throw new Error(`Unsupported property type: ${F.type}`)}switch(F.name){case\"x\":l[0]=t;break;case\"y\":l[1]=t;break;case\"z\":l[2]=t;break;case\"scale_0\":Q[0]=Math.exp(t);break;case\"scale_1\":Q[1]=Math.exp(t);break;case\"scale_2\":Q[2]=Math.exp(t);break;case\"red\":V[0]=t;break;case\"green\":V[1]=t;break;case\"blue\":V[2]=t;break;case\"f_dc_0\":V[0]=255*(.5+this.SH_C0*t);break;case\"f_dc_1\":V[1]=255*(.5+this.SH_C0*t);break;case\"f_dc_2\":V[2]=255*(.5+this.SH_C0*t);break;case\"f_dc_3\":V[3]=255*(.5+this.SH_C0*t);break;case\"opacity\":V[3]=1/(1+Math.exp(-t))*255;break;case\"rot_0\":n=t;break;case\"rot_1\":R=t;break;case\"rot_2\":W=t;break;case\"rot_3\":a=t}}));let J=new F(R,W,a,n);switch(t){case\"polycam\":{const U=l[1];l[1]=-l[2],l[2]=U,J=i.multiply(J);break}case\"\":break;default:throw new Error(`Unsupported format: ${t}`)}J=J.normalize(),Z[0]=128*J.w+128,Z[1]=128*J.x+128,Z[2]=128*J.y+128,Z[3]=128*J.z+128}return h}}function e(U,F,l){var t=void 0===F?null:F,Q=function(U,F){var l=atob(U);if(F){for(var t=new Uint8Array(l.length),Q=0,V=l.length;Q<V;++Q)t[Q]=l.charCodeAt(Q);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return l}(U,void 0!==l&&l),V=Q.indexOf(\"\\n\",10)+1,Z=Q.substring(V)+(t?\"//# sourceMappingURL=\"+t:\"\"),d=new Blob([Z],{type:\"application/javascript\"});return URL.createObjectURL(d)}R.SH_C0=.28209479177387814;var W,c,B,h,i=(W=\"\",c=null,B=!1,function(U){return h=h||e(W,c,B),new Worker(h,U)});class a{constructor(U=1){let F,l,t,Q=0,V=!1;this.init=(U,Z)=>{Q=0,V=!0,F=U,l=U.gl.getUniformLocation(Z,\"u_useDepthFade\"),F.gl.uniform1i(l,1),t=U.gl.getUniformLocation(Z,\"u_depthFade\"),F.gl.uniform1f(t,Q)},this.render=()=>{V&&(Q=Math.min(Q+.01*U,1),Q>=1&&(V=!1,F.gl.uniform1i(l,0)),F.gl.uniform1f(t,Q))}}}class J{constructor(l){const t=new Float32Array(1),V=new Int32Array(t.buffer),Z=U=>{t[0]=U;const F=V[0],l=F>>23&255;let Q,Z=8388607&F;return 0==l?Q=0:l<113?(Q=0,Z|=8388608,Z>>=113-l,16777216&Z&&(Q=1,Z=0)):l<142?Q=l-112:(Q=31,Z=0),(F>>31&1)<<15|Q<<10|Z>>13},d=(U,F)=>(Z(U)|Z(F)<<16)>>>0;this._width=2048,this._height=Math.ceil(2*l.vertexCount/this._width),this._buffer=new Uint32Array(this._width*this._height*4);const n=new Float32Array(this._buffer.buffer),R=new Uint8Array(this._buffer.buffer);for(let t=0;t<l.vertexCount;t++){n[8*t+0]=l.positions[3*t+0],n[8*t+1]=l.positions[3*t+1],n[8*t+2]=l.positions[3*t+2],R[4*(8*t+7)+0]=l.colors[4*t+0],R[4*(8*t+7)+1]=l.colors[4*t+1],R[4*(8*t+7)+2]=l.colors[4*t+2],R[4*(8*t+7)+3]=l.colors[4*t+3];const V=Q.RotationFromQuaternion(new F(l.rotations[4*t+1],l.rotations[4*t+2],l.rotations[4*t+3],-l.rotations[4*t+0])),Z=Q.Diagonal(new U(l.scales[3*t+0],l.scales[3*t+1],l.scales[3*t+2])).multiply(V).buffer,e=[Z[0]*Z[0]+Z[3]*Z[3]+Z[6]*Z[6],Z[0]*Z[1]+Z[3]*Z[4]+Z[6]*Z[7],Z[0]*Z[2]+Z[3]*Z[5]+Z[6]*Z[8],Z[1]*Z[1]+Z[4]*Z[4]+Z[7]*Z[7],Z[1]*Z[2]+Z[4]*Z[5]+Z[7]*Z[8],Z[2]*Z[2]+Z[5]*Z[5]+Z[8]*Z[8]];this._buffer[8*t+4]=d(4*e[0],4*e[1]),this._buffer[8*t+5]=d(4*e[2],4*e[3]),this._buffer[8*t+6]=d(4*e[4],4*e[5])}}get buffer(){return this._buffer}get width(){return this._width}get height(){return this._height}}class s{constructor(U=null,F=null){const l=U||document.createElement(\"canvas\");U||(l.style.display=\"block\",l.style.boxSizing=\"border-box\",l.style.width=\"100%\",l.style.height=\"100%\",l.style.margin=\"0\",l.style.padding=\"0\",document.body.appendChild(l)),l.style.background=\"#000\",this.domElement=l;const t=l.getContext(\"webgl2\",{antialias:!1});this.gl=t;const Q=F||[];let V,Z,d,n,R,e,W,c,B,h,s,m,b,o;F||Q.push(new a);let X=!1;this.resize=()=>{const U=l.clientWidth,F=l.clientHeight;l.width===U&&l.height===F||this.setSize(U,F)},this.setSize=(U,F)=>{l.width=U,l.height=F,Z&&(t.viewport(0,0,l.width,l.height),Z.update(l.width,l.height),W=t.getUniformLocation(e,\"projection\"),t.uniformMatrix4fv(W,!1,Z.projectionMatrix.buffer),c=t.getUniformLocation(e,\"viewport\"),t.uniform2fv(c,new Float32Array([l.width,l.height])))};const N=()=>{d=new i;const U={positions:V.positions,vertexCount:V.vertexCount};d.postMessage({sortData:U}),t.viewport(0,0,l.width,l.height),n=t.createShader(t.VERTEX_SHADER),t.shaderSource(n,\"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n\\nuniform highp usampler2D u_texture;\\nuniform mat4 projection, view;\\nuniform vec2 focal;\\nuniform vec2 viewport;\\n\\nuniform bool u_useDepthFade;\\nuniform float u_depthFade;\\n\\nin vec2 position;\\nin int index;\\n\\nout vec4 vColor;\\nout vec2 vPosition;\\n\\nvoid main () {\\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\\n    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);\\n    vec4 pos2d = projection * cam;\\n\\n    float clip = 1.2 * pos2d.w;\\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\\n        return;\\n    }\\n\\n\\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\\n\\n    mat3 J = mat3(\\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \\n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \\n        0., 0., 0.\\n    );\\n\\n    mat3 T = transpose(mat3(view)) * J;\\n    mat3 cov2d = transpose(T) * Vrk * T;\\n\\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\\n    float lambda1 = mid + radius, lambda2 = mid - radius;\\n\\n    if(lambda2 < 0.0) return;\\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\\n\\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\\n    vPosition = position;\\n\\n    float scalingFactor = 1.0;\\n\\n    if(u_useDepthFade) {\\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\\n        float near = 0.1; float far = 100.0;\\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\\n        float start = max(normalizedDepth - 0.1, 0.0);\\n        float end = min(normalizedDepth + 0.1, 1.0);\\n        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);\\n    }\\n\\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\\n    gl_Position = vec4(\\n        vCenter \\n        + position.x * majorAxis * scalingFactor / viewport \\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\\n\\n}\\n\"),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(n)),R=t.createShader(t.FRAGMENT_SHADER),t.shaderSource(R,\"#version 300 es\\nprecision highp float;\\n\\nin vec4 vColor;\\nin vec2 vPosition;\\n\\nout vec4 fragColor;\\n\\nvoid main () {\\n    float A = -dot(vPosition, vPosition);\\n    if (A < -4.0) discard;\\n    float B = exp(A) * vColor.a;\\n    fragColor = vec4(B * vColor.rgb, B);\\n}\\n\"),t.compileShader(R),t.getShaderParameter(R,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(R)),e=t.createProgram(),t.attachShader(e,n),t.attachShader(e,R),t.linkProgram(e),t.useProgram(e),t.getProgramParameter(e,t.LINK_STATUS)||console.error(t.getProgramInfoLog(e)),t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFuncSeparate(t.ONE_MINUS_DST_ALPHA,t.ONE,t.ONE_MINUS_DST_ALPHA,t.ONE),t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),Z.update(l.width,l.height),W=t.getUniformLocation(e,\"projection\"),t.uniformMatrix4fv(W,!1,Z.projectionMatrix.buffer),c=t.getUniformLocation(e,\"viewport\"),t.uniform2fv(c,new Float32Array([l.width,l.height])),B=t.getUniformLocation(e,\"focal\"),t.uniform2fv(B,new Float32Array([Z.fx,Z.fy])),h=t.getUniformLocation(e,\"view\"),t.uniformMatrix4fv(h,!1,Z.viewMatrix.buffer);const F=new Float32Array([-2,-2,2,-2,2,2,-2,2]);o=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,F,t.STATIC_DRAW),m=t.getAttribLocation(e,\"position\"),t.enableVertexAttribArray(m),t.vertexAttribPointer(m,2,t.FLOAT,!1,0,0);const a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),s=t.getUniformLocation(e,\"u_texture\"),t.uniform1i(s,0);const N=t.createBuffer();b=t.getAttribLocation(e,\"index\"),t.enableVertexAttribArray(b),t.bindBuffer(t.ARRAY_BUFFER,N),t.vertexAttribIPointer(b,1,t.INT,0,0),t.vertexAttribDivisor(b,1);const r=new J(V);t.bindTexture(t.TEXTURE_2D,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32UI,r.width,r.height,0,t.RGBA_INTEGER,t.UNSIGNED_INT,r.buffer),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,a);for(const U of Q)U.init(this,e);d.onmessage=U=>{if(U.data.depthIndex){const{depthIndex:F}=U.data;t.bindBuffer(t.ARRAY_BUFFER,N),t.bufferData(t.ARRAY_BUFFER,F,t.STATIC_DRAW)}},X=!0},r=()=>{X&&this.dispose(),N()};this.render=(U,F)=>{if(U===V&&F===Z||(X&&this.dispose(),Z=F,U!==V&&(V&&V.removeEventListener(\"change\",r),V=U,V.addEventListener(\"change\",r)),N()),Z.update(l.width,l.height),d.postMessage({viewProj:Z.viewProj}),V.vertexCount>0){for(const U of Q)U.render();t.uniformMatrix4fv(h,!1,Z.viewMatrix.buffer),t.clear(t.COLOR_BUFFER_BIT),t.drawArraysInstanced(t.TRIANGLE_FAN,0,4,V.vertexCount)}else t.clear(t.COLOR_BUFFER_BIT)},this.dispose=()=>{X&&(d.terminate(),t.deleteShader(n),t.deleteShader(R),t.deleteProgram(e),t.deleteBuffer(o),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),X=!1)},this.resize()}}class m{constructor(l,t,V=.5,Z=.5,d=5,n=!0,R=new U){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let e=R.clone(),W=e.clone(),c=V,B=Z,h=d,i=!1,a=!1,J=0,s=0,m=0;const b={};let o=null,X=!1;const N=()=>{if(!o||X)return;const F=o.rotation.toEuler();c=-F.y,B=-F.x;const l=o.position.x-h*Math.sin(c)*Math.cos(B),t=o.position.y+h*Math.sin(B),Q=o.position.z+h*Math.cos(c)*Math.cos(B);W=new U(l,t,Q)};this.attach=U=>{o&&this.detach(),o=U,o.addEventListener(\"change\",N)},this.detach=()=>{o&&(o.removeEventListener(\"change\",N),o=null)},this.attach(l),this.setCameraTarget=F=>{if(!o)return;const l=F.x-o.position.x,t=F.y-o.position.y,Q=F.z-o.position.z;h=Math.sqrt(l*l+t*t+Q*Q),B=Math.atan2(t,Math.sqrt(l*l+Q*Q)),c=-Math.atan2(l,Q),W=new U(F.x,F.y,F.z)};const r=()=>.1+.9*(h-this.minZoom)/(this.maxZoom-this.minZoom),p=U=>{b[U.code]=!0,\"ArrowUp\"===U.code&&(b.KeyW=!0),\"ArrowDown\"===U.code&&(b.KeyS=!0),\"ArrowLeft\"===U.code&&(b.KeyA=!0),\"ArrowRight\"===U.code&&(b.KeyD=!0)},G=U=>{b[U.code]=!1,\"ArrowUp\"===U.code&&(b.KeyW=!1),\"ArrowDown\"===U.code&&(b.KeyS=!1),\"ArrowLeft\"===U.code&&(b.KeyA=!1),\"ArrowRight\"===U.code&&(b.KeyD=!1)},y=U=>{E(U),i=!0,a=2===U.button,s=U.clientX,m=U.clientY,window.addEventListener(\"mouseup\",S)},S=U=>{E(U),i=!1,a=!1,window.removeEventListener(\"mouseup\",S)},Y=F=>{if(E(F),!i||!o)return;const l=F.clientX-s,t=F.clientY-m;if(a){const F=r(),V=-l*this.panSpeed*.01*F,Z=-t*this.panSpeed*.01*F,d=Q.RotationFromQuaternion(o.rotation).buffer,n=new U(d[0],d[3],d[6]),R=new U(d[1],d[4],d[7]);W=W.add(n.multiply(V)),W=W.add(R.multiply(Z))}else c-=l*this.orbitSpeed*.003,B+=t*this.orbitSpeed*.003,B=Math.min(Math.max(B,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);s=F.clientX,m=F.clientY},k=U=>{E(U);const F=r();h+=U.deltaY*this.zoomSpeed*.025*F,h=Math.min(Math.max(h,this.minZoom),this.maxZoom)},u=U=>{if(E(U),1===U.touches.length)i=!0,a=!1,s=U.touches[0].clientX,m=U.touches[0].clientY,J=0;else if(2===U.touches.length){i=!0,a=!0,s=(U.touches[0].clientX+U.touches[1].clientX)/2,m=(U.touches[0].clientY+U.touches[1].clientY)/2;const F=U.touches[0].clientX-U.touches[1].clientX,l=U.touches[0].clientY-U.touches[1].clientY;J=Math.sqrt(F*F+l*l)}},T=U=>{E(U),i=!1,a=!1},I=F=>{if(E(F),i&&o)if(a){const l=r(),t=F.touches[0].clientX-F.touches[1].clientX,V=F.touches[0].clientY-F.touches[1].clientY,Z=Math.sqrt(t*t+V*V);h+=(J-Z)*this.zoomSpeed*.1*l,h=Math.min(Math.max(h,this.minZoom),this.maxZoom),J=Z;const d=(F.touches[0].clientX+F.touches[1].clientX)/2,n=(F.touches[0].clientY+F.touches[1].clientY)/2,R=d-s,e=n-m,c=Q.RotationFromQuaternion(o.rotation).buffer,B=new U(c[0],c[3],c[6]),i=new U(c[1],c[4],c[7]);W=W.add(B.multiply(-R*this.panSpeed*.025*l)),W=W.add(i.multiply(-e*this.panSpeed*.025*l)),s=d,m=n}else{const U=F.touches[0].clientX-s,l=F.touches[0].clientY-m;c-=U*this.orbitSpeed*.003,B+=l*this.orbitSpeed*.003,B=Math.min(Math.max(B,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),s=F.touches[0].clientX,m=F.touches[0].clientY}},C=(U,F,l)=>(1-l)*U+l*F;this.update=()=>{if(!o)return;X=!0,V=C(V,c,this.dampening),Z=C(Z,B,this.dampening),d=C(d,h,this.dampening),e=e.lerp(W,this.dampening);const l=e.x+d*Math.sin(V)*Math.cos(Z),t=e.y-d*Math.sin(Z),n=e.z-d*Math.cos(V)*Math.cos(Z);o.position=new U(l,t,n);const R=e.subtract(o.position).normalize(),i=Math.asin(-R.y),a=Math.atan2(R.x,R.z);o.rotation=F.FromEuler(new U(i,a,0));const J=.025,s=.01,m=Q.RotationFromQuaternion(o.rotation).buffer,N=new U(-m[2],-m[5],-m[8]),r=new U(m[0],m[3],m[6]);b.KeyS&&(W=W.add(N.multiply(J))),b.KeyW&&(W=W.subtract(N.multiply(J))),b.KeyA&&(W=W.subtract(r.multiply(J))),b.KeyD&&(W=W.add(r.multiply(J))),b.KeyE&&(c+=s),b.KeyQ&&(c-=s),b.KeyR&&(B+=s),b.KeyF&&(B-=s),X=!1};const E=U=>{U.preventDefault(),U.stopPropagation()};this.dispose=()=>{t.removeEventListener(\"dragenter\",E),t.removeEventListener(\"dragover\",E),t.removeEventListener(\"dragleave\",E),t.removeEventListener(\"contextmenu\",E),t.removeEventListener(\"mousedown\",y),t.removeEventListener(\"mousemove\",Y),t.removeEventListener(\"wheel\",k),t.removeEventListener(\"touchstart\",u),t.removeEventListener(\"touchend\",T),t.removeEventListener(\"touchmove\",I),n&&(window.removeEventListener(\"keydown\",p),window.removeEventListener(\"keyup\",G))},n&&(window.addEventListener(\"keydown\",p),window.addEventListener(\"keyup\",G)),t.addEventListener(\"dragenter\",E),t.addEventListener(\"dragover\",E),t.addEventListener(\"dragleave\",E),t.addEventListener(\"contextmenu\",E),t.addEventListener(\"mousedown\",y),t.addEventListener(\"mousemove\",Y),t.addEventListener(\"wheel\",k),t.addEventListener(\"touchstart\",u),t.addEventListener(\"touchend\",T),t.addEventListener(\"touchmove\",I),this.update()}}class b{init(U,F){}render(){}}\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsplat/dist/index.js\n"));

/***/ })

}]);