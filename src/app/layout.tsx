"use client";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

// useState等のフック？クッキー取得？するため'use client'と同義になり？、
// よってmetadataをexportできない
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// sessionコンテキスト(仮) ----------------------------------------
import { createContext, useContext, useState, useEffect } from "react";
type Session = {
  user: {
    id: string;
  };
  storage: {
    type: "native" | "google";
  };
};
type SessionContextType = {
  session: Session | null;
  setSession: React.Dispatch<React.SetStateAction<Session | null>>;
};
const SessionContext = createContext<SessionContextType | undefined>(undefined);
export const useSession = (): SessionContextType => {
  const context = useContext(SessionContext);
  if (!context) {
    throw new Error("useSession must be used within a SessionProvider");
  }
  return context;
};
const SessionProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchSession = async () => {
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_BASE}/auth/session`,
        {
          credentials: "include",
        }
      );
      if (!response.ok) throw new Error("Failed to fetch session");

      const data = await response.json();
      setSession(data.session);
    } catch (error) {
      console.error("Error fetching session:", error);
      setSession(null);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchSession();
  }, []);

  if (isLoading) return <div>Loading...</div>;
  return (
    <SessionContext.Provider value={{ session, setSession }}>
      {children}
    </SessionContext.Provider>
  );
};
// sessionコンテキスト(仮) ----------------------------------------

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <SessionProvider>{children}</SessionProvider>
      </body>
    </html>
  );
}
